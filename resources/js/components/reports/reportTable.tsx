import moment from 'moment';
import { useMemo, useState } from 'react';

interface ReportData {
    dailyReport: number;
    returnRate: number;
    generatedBy: string;
    dailyLog: { data: Report[] };
}

interface Report {
    date: string;
    total_deliveries: number;
    total_returns: number;
    name: string;
    notes: string;
}

interface ReportTableProps {
    reports: ReportData;
}

type SortKey = 'date' | 'total_deliveries' | 'total_returns';
type SortDirection = 'asc' | 'desc';

export const ReportTable: React.FC<ReportTableProps> = ({ reports }) => {
    const [sortKey, setSortKey] = useState<SortKey | null>('date');
    const [sortDirection, setSortDirection] = useState<SortDirection>('desc');

    const handleSort = (key: SortKey) => {
        if (sortKey === key) {
            setSortDirection((prev) => (prev === 'asc' ? 'desc' : 'asc'));
        } else {
            setSortKey(key);
            setSortDirection('asc');
        }
    };

    const sortedData = useMemo(() => {
        if (!sortKey) return reports.dailyLog.data;
        return [...reports.dailyLog.data].sort((a, b) => {
            const aVal = sortKey === 'date' ? new Date(a.date).getTime() : a[sortKey];
            const bVal = sortKey === 'date' ? new Date(b.date).getTime() : b[sortKey];
            return sortDirection === 'asc' ? aVal - bVal : bVal - aVal;
        });
    }, [reports.dailyLog.data, sortKey, sortDirection]);

    const renderArrow = (key: SortKey) => (sortKey === key ? (sortDirection === 'asc' ? ' ↑' : ' ↓') : '');

    return (
        <table className="w-full text-left text-sm text-neutral-700 dark:text-neutral-200">
            <thead className="bg-neutral-100 text-xs uppercase dark:bg-neutral-800 dark:text-neutral-400">
                <tr>
                    <th className="cursor-pointer px-6 py-3" onClick={() => handleSort('date')}>
                        Date{renderArrow('date')}
                    </th>
                    <th className="cursor-pointer px-6 py-3" onClick={() => handleSort('total_deliveries')}>
                        Total Deliveries{renderArrow('total_deliveries')}
                    </th>
                    <th className="cursor-pointer px-6 py-3" onClick={() => handleSort('total_returns')}>
                        Returns{renderArrow('total_returns')}
                    </th>
                    <th className="px-6 py-3">Generated By</th>
                    <th className="px-6 py-3">Notes</th>
                </tr>
            </thead>
            <tbody>
                {sortedData.length > 0 &&
                    sortedData.map((val, key) => (
                        <tr key={key} className="border-b hover:bg-neutral-50 dark:border-neutral-700 dark:hover:bg-neutral-800">
                            <td className="px-6 py-4">{val.date ? moment(val.date).format('DD MMMM YYYY') : '-'}</td>
                            <td className="px-6 py-4">{val.total_deliveries}</td>
                            <td className="px-6 py-4">{val.total_returns}</td>
                            <td className="px-6 py-4">{val.name}</td>
                            <td className="px-6 py-4">{val.notes}</td>
                        </tr>
                    ))}
            </tbody>
        </table>
    );
};
