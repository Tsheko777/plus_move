import { Pagination } from '@/components/app-pagination';
import { ReportModal } from '@/components/reports/reportModal';
import { ReportTable } from '@/components/reports/reportTable';
import AppLayout from '@/layouts/app-layout';
import { type BreadcrumbItem } from '@/types';
import { Head, router } from '@inertiajs/react';
import axios from 'axios';
import { BarChart, FileText, Plus, Users } from 'lucide-react';
import { useState } from 'react';

const breadcrumbs: BreadcrumbItem[] = [
    { title: 'Dashboard', href: '/dashboard' },
    { title: 'Reports', href: '/reports' },
];

interface ReportData {
    dailyReport: number;
    returnRate: number;
    generatedBy: string;
    dailyLog: Data;
}

interface Data {
    data: [];
}

interface Props {
    reports: ReportData;
}

export default function Reports({ reports }: Props) {
    const [showModal, setShowModal] = useState(false);
    const [notes, setNotes] = useState<string>('');
    const [toastMessage, setToastMessage] = useState<string | null>(null);
    const [toastType, setToastType] = useState<'success' | 'error'>('success');

    const createReport = () => {
        const data = { notes: notes };
        axios
            .post('api/reports/create', data)
            .then((res) => {
                setToastMessage(res.data?.message || 'Report created successfully!');
                setToastType('success');
                setNotes('');
                router.visit('/reports', {
                    preserveScroll: true,
                    preserveState: true,
                });
            })
            .catch((err) => {
                setToastMessage(err.response.data.message ? err.response.data.message : 'Failed to create report');
                setToastType('error');
                console.error(err);
            });
        setTimeout(() => setToastMessage(null), 3000);
    };

    return (
        <AppLayout breadcrumbs={breadcrumbs}>
            <Head title="Reports" />
            <div className="space-y-5 p-6">
                <div className="toast-top toast-end toast z-[1000]">
                    {toastMessage && (
                        <div className={`alert ${toastType === 'success' ? 'alert-success' : 'alert-error'}`}>
                            <span>{toastMessage}</span>
                        </div>
                    )}
                </div>
                <div className="flex items-center justify-between">
                    <h1 className="text-2xl font-bold text-neutral-800 dark:text-white">Reports</h1>
                    <button onClick={() => setShowModal(true)} className="btn gap-2 btn-primary">
                        <Plus size={18} />
                        Create Report
                    </button>
                </div>
                <div className="grid gap-6 md:grid-cols-3">
                    <div className="rounded-2xl bg-gradient-to-br from-purple-500 to-purple-700 p-5 text-white shadow-xl transition-transform hover:scale-[1.02]">
                        <div className="flex items-center justify-between">
                            <div>
                                <p className="text-sm tracking-wide uppercase opacity-80">Daily Reports</p>
                                <h2 className="mt-1 text-4xl font-bold">{reports ? reports.dailyReport : 0}</h2>
                                <p className="mt-1 text-sm opacity-70">Past 30 days</p>
                            </div>
                            <FileText size={28} className="opacity-60" />
                        </div>
                    </div>

                    <div className="rounded-2xl bg-gradient-to-br from-yellow-500 to-yellow-700 p-5 text-white shadow-xl transition-transform hover:scale-[1.02]">
                        <div className="flex items-center justify-between">
                            <div>
                                <p className="text-sm tracking-wide uppercase opacity-80">Return Rate</p>
                                <h2 className="mt-1 text-4xl font-bold">{reports ? reports.returnRate + '%' : '0%'}</h2>
                                <p className="mt-1 text-sm opacity-70">This month</p>
                            </div>
                            <BarChart size={28} className="opacity-60" />
                        </div>
                    </div>

                    <div className="rounded-2xl bg-gradient-to-br from-pink-500 to-pink-700 p-5 text-white shadow-xl transition-transform hover:scale-[1.02]">
                        <div className="flex items-center justify-between">
                            <div>
                                <p className="text-sm tracking-wide uppercase opacity-80">Generated By</p>
                                <h2 className="mt-1 text-4xl font-bold">{reports && reports.generatedBy != '' ? reports.generatedBy : 'N/A'}</h2>
                                <p className="mt-1 text-sm opacity-70">Last report</p>
                            </div>
                            <Users size={28} className="opacity-60" />
                        </div>
                    </div>
                </div>
                <div className="overflow-x-auto rounded-2xl border border-neutral-200 bg-white shadow transition-colors dark:border-neutral-700 dark:bg-[#1e1e1e]">
                    <div className="p-6">
                        <h3 className="mb-4 flex items-center gap-2 text-xl font-semibold text-neutral-800 dark:text-white">
                            <FileText className="text-purple-500 dark:text-purple-400" />
                            Daily Reports Log
                        </h3>
                        {reports && reports.dailyLog ? <ReportTable reports={reports} /> : <div>No daily log</div>}
                    </div>
                </div>{' '}
                {showModal && <ReportModal setShowModal={setShowModal} createReport={createReport} setNotes={setNotes} />}
                <Pagination links={reports.dailyLog.links} />
            </div>
        </AppLayout>
    );
}
